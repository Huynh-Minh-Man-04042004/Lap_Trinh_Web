<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://jakarta.ee/xml/ns/jakartaee" xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd" id="WebApp_ID" version="6.0">
  <display-name>web_week_10</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>default.htm</welcome-file>
  </welcome-file-list>
</web-app>




























































<!-- Package Controller:
AddController:

package Controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;

import DBConnection.ConnectJDBC;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.util.List;
import models.Khoa;

@WebServlet("/AddController")
public class AddController extends HttpServlet {
    private static final long serialVersionUID = 1L;

    public AddController() {
        super();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try (Connection conn = new ConnectJDBC().getConnection()) {
            List<Khoa> listKhoa = utils.DBUtils.getAllKhoa(conn);
            request.setAttribute("listKhoa", listKhoa);
        } catch (Exception e) {
            e.printStackTrace();
        }

        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/add.jsp");
        dispatcher.forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String maMH = request.getParameter("maMH");
        String tenMH = request.getParameter("tenMH");
        int maKhoa = Integer.parseInt(request.getParameter("maKhoa"));
        int soTC = Integer.parseInt(request.getParameter("soTC"));

        String insertSQL = "INSERT INTO MonHoc (maMH, tenMH, maKhoa, soTC) VALUES (?, ?, ?, ?)";
        try (Connection conn = new ConnectJDBC().getConnection();
             PreparedStatement ps = conn.prepareStatement(insertSQL)) {

            ps.setString(1, maMH);
            ps.setString(2, tenMH);
            ps.setInt(3, maKhoa);
            ps.setInt(4, soTC);

            ps.executeUpdate();
            System.out.println("Thêm môn học thành công: " + tenMH);

        } catch (Exception e) {
            e.printStackTrace();
            response.getWriter().println("Lỗi khi thêm môn học: " + e.getMessage());
            return;
        }

        response.sendRedirect("MonHocController");
    }
}

DeleteController:

package Controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;

import DBConnection.ConnectJDBC;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/DeleteController")
public class DeleteController extends HttpServlet {
    private static final long serialVersionUID = 1L;

    public DeleteController() {
        super();
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String maMH = request.getParameter("maMH");

        if (maMH == null || maMH.isEmpty()) {
            response.sendRedirect("MonHocController");
            return;
        }

        String deleteSQL = "DELETE FROM MonHoc WHERE maMH = ?";
        try (Connection conn = new ConnectJDBC().getConnection();
             PreparedStatement ps = conn.prepareStatement(deleteSQL)) {

            ps.setString(1, maMH);
            int rowsAffected = ps.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Xóa môn học thành công: " + maMH);
            } else {
                System.out.println("Không tìm thấy môn học với mã: " + maMH);
            }

        } catch (Exception e) {
            e.printStackTrace();
            response.getWriter().println("Lỗi khi xóa môn học: " + e.getMessage());
        }

        response.sendRedirect("MonHocController");
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.sendRedirect("MonHocController");
    }
}

EditController:

package Controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;

import DBConnection.ConnectJDBC;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import models.Khoa;
import models.MonHoc;

@WebServlet("/EditController")
public class EditController extends HttpServlet {
    private static final long serialVersionUID = 1L;

    public EditController() {
        super();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String maMH = request.getParameter("maMH");
        MonHoc monHoc = null;

        try (Connection conn = new ConnectJDBC().getConnection()) {
            // Lấy thông tin môn học từ cơ sở dữ liệu
            String sql = "SELECT mh.maMH, mh.tenMH, k.tenKhoa, mh.soTC " +
                         "FROM MonHoc mh " +
                         "INNER JOIN Khoa k ON mh.maKhoa = k.maKhoa " +
                         "WHERE mh.maMH = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, maMH);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                monHoc = new MonHoc();
                monHoc.setMaMH(rs.getString("maMH"));
                monHoc.setTenMH(rs.getString("tenMH"));
                monHoc.setTenKhoa(rs.getString("tenKhoa"));
                monHoc.setSoTC(rs.getInt("soTC"));
            }

            // Lấy danh sách khoa để hiển thị trong dropdown
            List<Khoa> listKhoa = utils.DBUtils.getAllKhoa(conn);
            request.setAttribute("listKhoa", listKhoa);
            request.setAttribute("monHoc", monHoc);

        } catch (Exception e) {
            e.printStackTrace();
        }

        // Chuyển tiếp đến trang edit.jsp
        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/edit.jsp");
        dispatcher.forward(request, response);
    }



    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String maMH = request.getParameter("maMH");
        String tenMH = request.getParameter("tenMH");
        int maKhoa = Integer.parseInt(request.getParameter("maKhoa"));
        int soTC = Integer.parseInt(request.getParameter("soTC"));

        String updateSQL = "UPDATE MonHoc SET tenMH = ?, maKhoa = ?, soTC = ? WHERE maMH = ?";
        try (Connection conn = new ConnectJDBC().getConnection();
             PreparedStatement ps = conn.prepareStatement(updateSQL)) {

            ps.setString(1, tenMH);
            ps.setInt(2, maKhoa);
            ps.setInt(3, soTC);
            ps.setString(4, maMH);

            ps.executeUpdate();
            System.out.println("Cập nhật môn học thành công: " + tenMH);

        } catch (Exception e) {
            e.printStackTrace();
            response.getWriter().println("Lỗi khi cập nhật môn học: " + e.getMessage());
            return;
        }

        response.sendRedirect("MonHocController");
    }
}

MonHocController:

package Controller;

import java.io.IOException;
import java.sql.Connection;
import java.util.List;

import DBConnection.ConnectJDBC;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import models.MonHoc;
import utils.DBUtils;

@WebServlet("/MonHocController")
public class MonHocController extends HttpServlet {
	private static final long serialVersionUID = 1L;

    public MonHocController() {
        super();
    }


	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		Connection conn = null;
		try {
			conn = new ConnectJDBC().getConnection();
		}
		catch (Exception e) {
			e.printStackTrace();
		}

		List<MonHoc> listMH = null;
		try {
			listMH = DBUtils.DanhSachMH(conn);
		}
		catch (Exception e) {
			e.printStackTrace();
		}

		request.setAttribute("ListMH", listMH);

		RequestDispatcher req = request.getRequestDispatcher("/views/home.jsp");
		req.forward(request, response);
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}

}

Package DBConnection:
Class ConnectJDBC:

package DBConnection;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import models.MonHoc;

public class ConnectJDBC {
	private final String serverName = "localhost\\SQLEXPRESS01";
	private final String dbName = "LTWeb_MonHoc";
	private final String portNumber = "1433";
	private final String username = "sa";
	private final String password = "123456";



	public Connection getConnection() throws Exception {
		String url = "jdbc:sqlserver://" + serverName + ":" + portNumber + ";encrypt=false;databaseName=" + dbName;
		Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
		return DriverManager.getConnection(url, username, password);
	}
	public static void main(String[] args) {
	    ConnectJDBC connectJDBC = new ConnectJDBC();
	    try (Connection conn = connectJDBC.getConnection()) {
	        System.out.println("Kết nối thành công!");

	        String sql = "Select mh.maMH, mh.tenMH, k.tenKhoa, mh.soTC from MonHoc as mh inner join Khoa as k on mh.maKhoa = k.makhoa";
	        PreparedStatement ps = conn.prepareStatement(sql);
	        ResultSet rs = ps.executeQuery();

	        while (rs.next()) {
	        	MonHoc mh = new MonHoc();
    			mh.setMaMH(rs.getString("maMH"));
    			mh.setTenMH(rs.getString("tenMH"));
    			mh.setTenKhoa(rs.getString("tenKhoa"));
    			mh.setSoTC(rs.getInt("soTC"));
    			System.out.println("Ma MH: " + mh.getMaMH() + ", Ten MH: " + mh.getTenMH() + ", Ten Khoa: " + mh.getTenKhoa() + ", So Tin chi: " + mh.getSoTC());
	        }
	    } catch (Exception e) {
	        System.out.println("Lỗi kết nối: " + e.getMessage());
	        e.printStackTrace();
	    }
	}
}

Package models:
Class Khoa:

package models;

public class Khoa {
	private int maKhoa;
	private String tenKhoa;

	public int getMaKhoa() {
		return maKhoa;
	}

	public void setMaKhoa(int maKhoa) {
		this.maKhoa = maKhoa;
	}

	public String getTenKhoa() {
		return tenKhoa;
	}

	public void setTenKhoa(String tenKhoa) {
		this.tenKhoa = tenKhoa;
	}

}

Class MonHoc:

package models;

public class MonHoc {
	private String maMH;
	private String tenMH;
	private String tenKhoa;
	private int soTC;

	public String getMaMH() {
		return maMH;
	}

	public void setMaMH(String maMH) {
		this.maMH = maMH;
	}

	public String getTenMH() {
		return tenMH;
	}

	public void setTenMH(String tenMH) {
		this.tenMH = tenMH;
	}

	public String getTenKhoa() {
		return tenKhoa;
	}

	public void setTenKhoa(String tenKhoa) {
		this.tenKhoa = tenKhoa;
	}

	public int getSoTC() {
		return soTC;
	}

	public void setSoTC(int soTC) {
		this.soTC = soTC;
	}

}


Package utils:
Class DBUtils:

package utils;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import models.Khoa;
import models.MonHoc;

public class DBUtils {
	public static List<MonHoc> DanhSachMH(Connection conn) throws SQLException {
		List<MonHoc> listMH = new ArrayList<>();
		String sql = "Select mh.maMH, mh.tenMH, k.tenKhoa, mh.soTC from MonHoc as mh inner join Khoa as k on mh.maKhoa = k.makhoa";

		PreparedStatement ps = conn.prepareStatement(sql);
		ResultSet rs = ps.executeQuery();

		while (rs.next()) {
			MonHoc mh = new MonHoc();
			mh.setMaMH(rs.getString("maMH"));
			mh.setTenMH(rs.getString("tenMH"));
			mh.setTenKhoa(rs.getString("tenKhoa"));
			mh.setSoTC(rs.getInt("soTC"));
			listMH.add(mh);
		}

		return listMH;
	}

	public static List<Khoa> getAllKhoa(Connection conn) throws SQLException {
	    List<Khoa> listKhoa = new ArrayList<>();
	    String sql = "SELECT MaKhoa, TenKhoa FROM Khoa";
	    try (PreparedStatement ps = conn.prepareStatement(sql);
	         ResultSet rs = ps.executeQuery()) {

	        while (rs.next()) {
	            Khoa khoa = new Khoa();
	            khoa.setMaKhoa(rs.getInt("MaKhoa"));
	            khoa.setTenKhoa(rs.getString("TenKhoa"));
	            listKhoa.add(khoa);
	        }
	    }
	    return listKhoa;
	}

}

Webapp/views:
Home.jsp:

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="jakarta.tags.core"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Danh Sách Môn Học</title>
</head>
<body>
    <h2 style="text-align: center;">Danh Sách Môn Học</h2>

    Dropdown chọn Tên Học Phần
    <div style="margin-bottom: 10px;">
        <label for="hocPhan">Chọn Tên Học Phần:</label>
        <select id="hocPhan" name="hocPhan">
            <option value="">Tất cả</option>
            <option value="MH1">Đại cương văn hóa Việt Nam</option>
            <option value="MH2">Tin học</option>
            <option value="MH3">Toán cao cấp</option>
        </select>
    </div>

    Bảng hiển thị thông tin Môn Học
    <table border="1" cellspacing="0" cellpadding="5" style="width: 100%; margin-top: 10px;">
        <tr style="background-color: #f2f2f2; text-align: center;">
            <th>STT</th>
            <th>Mã Môn Học</th>
            <th>Tên Môn Học</th>
            <th>Khoa Phụ Trách</th>
            <th>Số Tín Chỉ</th>
            <th>Action</th>
        </tr>
        <c:forEach var="mh" items="${ListMH}" varStatus="status">
            <tr style="text-align: center;">
                <td>${status.index + 1}</td>
                <td>${mh.maMH}</td>
                <td>${mh.tenMH}</td>
                <td>${mh.tenKhoa}</td>
                <td>${mh.soTC}</td>
                <td>
                    <a href="EditController?maMH=${mh.maMH}">Sửa</a> / 
                    <a href="javascript:void(0);" onclick="confirmDelete('${mh.maMH}');">Xóa</a>
                </td>
            </tr>
        </c:forEach>
    </table>

    <script>
        function confirmDelete(maMH) {
            if (confirm("Bạn chắc chắn muốn xóa môn học này?")) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = 'DeleteController';

                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'maMH';
                input.value = maMH;

                form.appendChild(input);
                document.body.appendChild(form);
                form.submit();
            }
        }
    </script>
</body>
</html>

Add.jsp:

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <title>Thêm Môn Học</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
</head>
<body>
    <div class="container mt-4">
        Tiêu đề Form
        <h2 class="text-center">Thêm Môn Học</h2>

        Form Thêm Môn Học
        <form action="AddController" method="post">
            Mã Môn Học
            <div class="mb-3">
                <label for="maMH" class="form-label">Mã Môn Học</label>
                <input type="text" class="form-control" id="maMH" name="maMH" required>
            </div>

            Tên Môn Học
            <div class="mb-3">
                <label for="tenMH" class="form-label">Tên Môn Học</label>
                <input type="text" class="form-control" id="tenMH" name="tenMH" required>
            </div>

            Khoa Phụ Trách
            <div class="mb-3">
                <label for="maKhoa" class="form-label">Khoa Phụ Trách</label>
                <select class="form-control" id="maKhoa" name="maKhoa" required>
                    <option value="">Chọn Khoa</option>
                    <c:forEach var="khoa" items="${listKhoa}">
                        <option value="${khoa.maKhoa}">${khoa.tenKhoa}</option>
                    </c:forEach>
                </select>
            </div>

            Số Tín Chỉ
            <div class="mb-3">
                <label for="soTC" class="form-label">Số Tín Chỉ</label>
                <input type="number" class="form-control" id="soTC" name="soTC" required>
            </div>

            Nút Thêm
            <button type="submit" class="btn btn-primary">Thêm Môn Học</button>
        </form>
    </div>
</body>
</html>

edit.jsp:

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Sửa Môn Học</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
</head>
<body>
    <div class="container mt-4">
        <h2 class="text-center">Sửa Môn Học</h2>
        <form action="EditController" method="post">
            Mã Môn Học (Chỉ đọc)
            <div class="mb-3">
                <label for="maMH" class="form-label">Mã Môn Học</label>
                <input type="text" class="form-control" id="maMH" name="maMH" value="${monHoc.maMH}" readonly>
            </div>

            Tên Môn Học
            <div class="mb-3">
                <label for="tenMH" class="form-label">Tên Môn Học</label>
                <input type="text" class="form-control" id="tenMH" name="tenMH" value="${monHoc.tenMH}" required>
            </div>

            Khoa Phụ Trách (Dropdown list)
            <div class="mb-3">
                <label for="maKhoa" class="form-label">Khoa Phụ Trách</label>
                <select class="form-control" id="maKhoa" name="maKhoa" required>
                    <option value="">Chọn Khoa</option>
                    <c:forEach var="khoa" items="${listKhoa}">
                        <option value="${khoa.maKhoa}" ${monHoc.tenKhoa == khoa.tenKhoa ? 'selected' : ''}>${khoa.tenKhoa}</option>
                    </c:forEach>
                </select>
            </div>

            Số Tín Chỉ
            <div class="mb-3">
                <label for="soTC" class="form-label">Số Tín Chỉ</label>
                <input type="number" class="form-control" id="soTC" name="soTC" value="${monHoc.soTC}" required>
            </div>

            Nút Cập Nhật
            <button type="submit" class="btn btn-primary">Cập Nhật</button>
        </form>
    </div>
</body>
</html>
 -->